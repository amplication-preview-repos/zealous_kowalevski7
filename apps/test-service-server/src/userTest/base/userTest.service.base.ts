/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserTest as PrismaUserTest,
  User as PrismaUser,
  Test as PrismaTest,
} from "@prisma/client";

export class UserTestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserTestCountArgs, "select">): Promise<number> {
    return this.prisma.userTest.count(args);
  }

  async userTests(
    args: Prisma.UserTestFindManyArgs
  ): Promise<PrismaUserTest[]> {
    return this.prisma.userTest.findMany(args);
  }
  async userTest(
    args: Prisma.UserTestFindUniqueArgs
  ): Promise<PrismaUserTest | null> {
    return this.prisma.userTest.findUnique(args);
  }
  async createUserTest(
    args: Prisma.UserTestCreateArgs
  ): Promise<PrismaUserTest> {
    return this.prisma.userTest.create(args);
  }
  async updateUserTest(
    args: Prisma.UserTestUpdateArgs
  ): Promise<PrismaUserTest> {
    return this.prisma.userTest.update(args);
  }
  async deleteUserTest(
    args: Prisma.UserTestDeleteArgs
  ): Promise<PrismaUserTest> {
    return this.prisma.userTest.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userTest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getTest(parentId: string): Promise<PrismaTest | null> {
    return this.prisma.userTest
      .findUnique({
        where: { id: parentId },
      })
      .test();
  }
}
